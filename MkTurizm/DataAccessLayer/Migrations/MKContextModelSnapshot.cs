// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(MKContext))]
    partial class MKContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityLayer.Concrete.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TcNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EntityLayer.Concrete.BusService", b =>
                {
                    b.Property<int>("BusServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromCityId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("Station1Id")
                        .HasColumnType("int");

                    b.Property<int?>("Station2Id")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("ToCityId")
                        .HasColumnType("int");

                    b.HasKey("BusServiceId");

                    b.HasIndex("FromCityId");

                    b.HasIndex("Station1Id");

                    b.HasIndex("Station2Id");

                    b.HasIndex("ToCityId");

                    b.ToTable("BusServices");

                    b.HasData(
                        new
                        {
                            BusServiceId = 1,
                            Date = new DateTime(2022, 5, 12, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            FromCityId = 2,
                            Price = 100,
                            Station1Id = 3,
                            Status = true,
                            ToCityId = 1
                        },
                        new
                        {
                            BusServiceId = 2,
                            Date = new DateTime(2022, 5, 13, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            FromCityId = 3,
                            Price = 100,
                            Station1Id = 2,
                            Station2Id = 3,
                            Status = true,
                            ToCityId = 1
                        },
                        new
                        {
                            BusServiceId = 3,
                            Date = new DateTime(2022, 5, 13, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            FromCityId = 4,
                            Price = 200,
                            Station1Id = 2,
                            Station2Id = 3,
                            Status = true,
                            ToCityId = 1
                        },
                        new
                        {
                            BusServiceId = 4,
                            Date = new DateTime(2022, 5, 13, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            FromCityId = 5,
                            Price = 300,
                            Station1Id = 2,
                            Station2Id = 3,
                            Status = true,
                            ToCityId = 1
                        },
                        new
                        {
                            BusServiceId = 5,
                            Date = new DateTime(2022, 5, 12, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            FromCityId = 6,
                            Price = 400,
                            Station1Id = 3,
                            Station2Id = 5,
                            Status = true,
                            ToCityId = 1
                        },
                        new
                        {
                            BusServiceId = 6,
                            Date = new DateTime(2022, 5, 13, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            FromCityId = 6,
                            Price = 400,
                            Station1Id = 4,
                            Station2Id = 5,
                            Status = true,
                            ToCityId = 1
                        },
                        new
                        {
                            BusServiceId = 7,
                            Date = new DateTime(2022, 5, 12, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            FromCityId = 6,
                            Price = 500,
                            Status = true,
                            ToCityId = 1
                        },
                        new
                        {
                            BusServiceId = 8,
                            Date = new DateTime(2022, 5, 12, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            FromCityId = 2,
                            Price = 100,
                            Status = true,
                            ToCityId = 1
                        },
                        new
                        {
                            BusServiceId = 9,
                            Date = new DateTime(2022, 5, 12, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            FromCityId = 4,
                            Price = 400,
                            Station1Id = 2,
                            Station2Id = 3,
                            Status = true,
                            ToCityId = 1
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "İstanbul"
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "Bolu"
                        },
                        new
                        {
                            CityId = 3,
                            CityName = "Kocaeli"
                        },
                        new
                        {
                            CityId = 4,
                            CityName = "Karabük"
                        },
                        new
                        {
                            CityId = 5,
                            CityName = "Adana"
                        },
                        new
                        {
                            CityId = 6,
                            CityName = "Gaziantep"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Passenger", b =>
                {
                    b.Property<int>("PassengerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PassengerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassengerTc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassengerTel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PassengerId");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Reservation", b =>
                {
                    b.Property<int>("BusServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int?>("PassengerId")
                        .HasColumnType("int");

                    b.Property<int>("PnrNo")
                        .HasColumnType("int");

                    b.HasKey("BusServiceId", "SeatId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PassengerId");

                    b.HasIndex("SeatId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SeatNo")
                        .HasColumnType("int");

                    b.HasKey("SeatId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            SeatId = 1,
                            SeatNo = 1
                        },
                        new
                        {
                            SeatId = 2,
                            SeatNo = 2
                        },
                        new
                        {
                            SeatId = 3,
                            SeatNo = 3
                        },
                        new
                        {
                            SeatId = 4,
                            SeatNo = 4
                        },
                        new
                        {
                            SeatId = 5,
                            SeatNo = 5
                        },
                        new
                        {
                            SeatId = 6,
                            SeatNo = 6
                        },
                        new
                        {
                            SeatId = 7,
                            SeatNo = 7
                        },
                        new
                        {
                            SeatId = 8,
                            SeatNo = 8
                        },
                        new
                        {
                            SeatId = 9,
                            SeatNo = 9
                        },
                        new
                        {
                            SeatId = 10,
                            SeatNo = 10
                        },
                        new
                        {
                            SeatId = 11,
                            SeatNo = 11
                        },
                        new
                        {
                            SeatId = 12,
                            SeatNo = 12
                        },
                        new
                        {
                            SeatId = 13,
                            SeatNo = 13
                        },
                        new
                        {
                            SeatId = 14,
                            SeatNo = 14
                        },
                        new
                        {
                            SeatId = 15,
                            SeatNo = 15
                        },
                        new
                        {
                            SeatId = 16,
                            SeatNo = 16
                        },
                        new
                        {
                            SeatId = 17,
                            SeatNo = 17
                        },
                        new
                        {
                            SeatId = 18,
                            SeatNo = 18
                        },
                        new
                        {
                            SeatId = 19,
                            SeatNo = 19
                        },
                        new
                        {
                            SeatId = 20,
                            SeatNo = 20
                        },
                        new
                        {
                            SeatId = 21,
                            SeatNo = 21
                        },
                        new
                        {
                            SeatId = 22,
                            SeatNo = 22
                        },
                        new
                        {
                            SeatId = 23,
                            SeatNo = 23
                        },
                        new
                        {
                            SeatId = 24,
                            SeatNo = 24
                        },
                        new
                        {
                            SeatId = 25,
                            SeatNo = 25
                        },
                        new
                        {
                            SeatId = 26,
                            SeatNo = 26
                        },
                        new
                        {
                            SeatId = 27,
                            SeatNo = 27
                        },
                        new
                        {
                            SeatId = 28,
                            SeatNo = 28
                        },
                        new
                        {
                            SeatId = 29,
                            SeatNo = 29
                        },
                        new
                        {
                            SeatId = 30,
                            SeatNo = 30
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EntityLayer.Concrete.BusService", b =>
                {
                    b.HasOne("EntityLayer.Concrete.City", "FromCity")
                        .WithMany("FromCity")
                        .HasForeignKey("FromCityId")
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.City", "Station1")
                        .WithMany("Station1")
                        .HasForeignKey("Station1Id");

                    b.HasOne("EntityLayer.Concrete.City", "Station2")
                        .WithMany("Station2")
                        .HasForeignKey("Station2Id");

                    b.HasOne("EntityLayer.Concrete.City", "ToCity")
                        .WithMany("ToCity")
                        .HasForeignKey("ToCityId")
                        .IsRequired();

                    b.Navigation("FromCity");

                    b.Navigation("Station1");

                    b.Navigation("Station2");

                    b.Navigation("ToCity");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Reservation", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", "AppUser")
                        .WithMany("Reservations")
                        .HasForeignKey("AppUserId");

                    b.HasOne("EntityLayer.Concrete.BusService", "BusService")
                        .WithMany("Reservation")
                        .HasForeignKey("BusServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Passenger", "Passenger")
                        .WithMany("Reservations")
                        .HasForeignKey("PassengerId");

                    b.HasOne("EntityLayer.Concrete.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("BusService");

                    b.Navigation("Passenger");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Concrete.AppUser", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("EntityLayer.Concrete.BusService", b =>
                {
                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("EntityLayer.Concrete.City", b =>
                {
                    b.Navigation("FromCity");

                    b.Navigation("Station1");

                    b.Navigation("Station2");

                    b.Navigation("ToCity");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Passenger", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
